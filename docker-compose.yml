services:
  postgres:
    image: postgres:15-alpine
    container_name: sonar-db
    environment:
      POSTGRES_USER: sonar
      POSTGRES_PASSWORD: sonar
      POSTGRES_DB: sonarqube
    volumes:
      - sonar_db_data:/var/lib/postgresql/data
    networks:
      - cicd
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U sonar -d sonarqube"]
      interval: 10s
      timeout: 5s
      retries: 10

  sonarqube:
    image: sonarqube:community
    container_name: sonarqube
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      SONAR_JDBC_URL: jdbc:postgresql://postgres:5432/sonarqube
      SONAR_JDBC_USERNAME: sonar
      SONAR_JDBC_PASSWORD: sonar
      SONAR_WEB_JAVAOPTS: "-Xms512m -Xmx512m"
    ports:
      - "9000:9000"
    volumes:
      - sonar_data:/opt/sonarqube/data
      - sonar_extensions:/opt/sonarqube/extensions
      - sonar_logs:/opt/sonarqube/logs
    networks:
      - cicd
    healthcheck:
      test: ["CMD", "bash", "-c", "wget -qO- http://localhost:9000/api/system/health | grep -q 'GREEN'"]
      interval: 15s
      timeout: 10s
      retries: 40
      start_period: 60s

  jenkins:
    build:
      context: ./jenkins
      dockerfile: Dockerfile
    image: mi-jenkins-personal:lts
    container_name: jenkins
    user: root
    ports:
      - "8080:8080"
      - "50000:50000"
    environment:
      JAVA_OPTS: "-Djenkins.install.runSetupWizard=false"
      DOCKER_HOST: "unix:///var/run/docker.sock"
    volumes:
      - jenkins_home:/var/jenkins_home
      - /var/run/docker.sock:/var/run/docker.sock
      - ./:/home/pipeline/project
    networks:
      - cicd
    depends_on:
      - sonarqube

networks:
  cicd:
    driver: bridge

volumes:
  jenkins_home:
  sonar_data:
  sonar_extensions:
  sonar_logs:
  sonar_db_data: